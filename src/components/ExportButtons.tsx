
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Download, FileText, Table } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

interface ExportButtonsProps {
  selectedResult: any | null;
}

const ExportButtons = ({ selectedResult }: ExportButtonsProps) => {
  const { toast } = useToast();

  const exportToPDF = () => {
    if (!selectedResult) {
      toast({ title: "No Row Selected", description: "Please select a test result row to export." });
      return;
    }
    const doc = new jsPDF();
    // Header
    doc.setFontSize(22);
    doc.setTextColor(34, 45, 67);
    doc.text("VAS Test Report", 14, 20);
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(`Date: ${selectedResult.timestamp || "-"}`.trim(), 14, 28);
    // Table with only relevant fields
    autoTable(doc, {
      startY: 38,
      head: [[
        "Test Name",
        "Status",
        "MSISDN",
        "Click ID",
        "Airtime Before",
        "Airtime After"
      ]],
      body: [[
        selectedResult.test_name || "",
        selectedResult.status || "",
        selectedResult.msisdn || "",
        selectedResult.click_id || "",
        selectedResult.airtime_before || "",
        selectedResult.airtime_after || ""
      ]],
      styles: { fontSize: 12, cellPadding: 4, valign: 'middle' },
      headStyles: { fillColor: [39, 174, 96], textColor: 255, fontStyle: 'bold' },
      alternateRowStyles: { fillColor: [245, 255, 250] },
      tableLineColor: [39, 174, 96],
      tableLineWidth: 0.2
    });
    // Video URL section
    let y = doc.lastAutoTable.finalY + 12;
    doc.setFontSize(13);
    doc.setTextColor(34, 45, 67);
    doc.text("Video Recording:", 14, y);
    doc.setFontSize(11);
    doc.setTextColor(0, 102, 204);
    const videoUrl = selectedResult.video_url ? selectedResult.video_url.replace(/[`\s]+/g, "") : "N/A";
    doc.textWithLink(videoUrl, 14, y + 7, { url: videoUrl });
    // Footer
    doc.setFontSize(9);
    doc.setTextColor(150, 150, 150);
    doc.text("Generated by Naija Test Report Hub", 14, 285);
    doc.save(`vas_test_report_${selectedResult.msisdn}_${selectedResult.timestamp}.pdf`);
    toast({ title: "PDF Ready", description: "Your VAS testing report has been downloaded." });
  };

  const exportToCSV = () => {
    if (!selectedResult) {
      toast({ title: "No Row Selected", description: "Please select a test result row to export." });
      return;
    }
    const csvHeader = [
      "Test Name",
      "Status",
      "MSISDN",
      "Timestamp",
      "Click ID",
      "Airtime Before",
      "Airtime After",
      "Video URL"
    ].join(",");

    const csvRow = [
      selectedResult.test_name,
      selectedResult.status,
      selectedResult.msisdn,
      selectedResult.timestamp,
      selectedResult.click_id,
      selectedResult.airtime_before,
      selectedResult.airtime_after,
      selectedResult.video_url || ""
    ].map(field => `"${String(field).replace(/"/g, '""')}"`).join(",");

    const csvContent = [csvHeader, csvRow].join("\n");
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `vas_test_report_${selectedResult.msisdn}_${selectedResult.timestamp}.csv`;
    link.click();
    toast({ title: "CSV Downloaded", description: "Your test data has been exported to CSV." });
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button className="bg-green-600 hover:bg-green-700">
          <Download className="h-4 w-4 mr-2" />
          Export Report
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-48">
        <DropdownMenuItem onClick={exportToPDF}>
          <FileText className="h-4 w-4 mr-2" />
          Export as PDF
        </DropdownMenuItem>
        <DropdownMenuItem onClick={exportToCSV}>
          <Table className="h-4 w-4 mr-2" />
          Export as CSV
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default ExportButtons;
